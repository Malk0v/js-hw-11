{"mappings":"qhBAgBA,IAAAA,EAAAC,EAAA,SAQA,MAAMC,EAAO,CACXC,WAAYC,SAASC,cAAc,UACnCC,UAAWF,SAASC,cAAc,SAClCE,OAAQH,SAASC,cAAc,WAC/BG,OAAQJ,SAASC,cAAc,YAGjCI,EAAAT,GAASU,OAAOC,QAAQ,wBAEPT,EAAZM,OAAOI,iBAAiB,SAASC,IACpCA,EAAEC,iBAEF,MAAMC,EAAQb,EAAKC,WAAWa,MACxBC,EAAYf,EAAKI,UAAUU,MAC3BE,EAAcC,OAAOjB,EAAKK,OAAOS,OAErBI,YAAW,KAC3BX,EAAAT,GAASU,OAAOW,KAAK,WAEf,IAAFC,EAAW,EAIf,MAAMC,EAAYC,aAAY,KAC5B,GAAIF,GAAYJ,EAGd,OAFAT,EAAAT,GAASU,OAAOe,QAAQ,iBAACH,qDACyBI,cAApCH,GAMhB,IAAuBI,EAAUC,EAFjCN,GAAY,GAEWK,EAiBTL,EAjBmBM,EAiBTX,EAhBf,IAAIY,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAGpCH,EACErB,EAAAT,GAASU,OAAOC,QAAQ,2BAACgB,iBAA+CC,SAEzCG,EAC/BtB,EAAAT,GAASU,OAAOwB,QAAQ,8BAACP,iBAAqDC,QAAS,KAS5FO,MAAK,SAELC,OAAM,QACL,GAEHnB,EAAU,GACZF,EAAM","sources":["src/js/03-promises.js"],"sourcesContent":["// ## Задание 3 - генератор промисов\n\n// Выполняй это задание в файлах `03-promises.html` и `03-promises.js`. Посмотри\n// демо видео работы генератора промисов.\n\n// https://user-images.githubusercontent.com/17479434/127932183-42232f26-4db2-4614-86bc-6bec54b1d6a4.mp4\n\n// <!-- Посмотри\n// [демо видео](https://user-images.githubusercontent.com/17479434/127932183-42232f26-4db2-4614-86bc-6bec54b1d6a4.mp4)\n// работы генератора промисов. -->\n\n// В HTML есть разметка формы, в поля которой пользователь будет вводить первую\n// задержку в миллисекундах, шаг увеличения задержки для каждого промиса после\n// первого и количество промисов которое необходимо создать.\n\n\nimport Notiflix from 'notiflix';\n\n// console.log(Notiflix);\n// Notiflix.Notify.success('Sol lucet omnibus');\n// Notiflix.Notify.failure('Qui timide rogat docet negare');\n// Notiflix.Notify.warning('Memento te hominem esse');\n// Notiflix.Notify.info('Cogito ergo sum');\n\nconst refs = {\n  firstDelay: document.querySelector('.delay'),\n  stepDelay: document.querySelector('.step'),\n  amount: document.querySelector('.amound'),\n  button: document.querySelector('.button'),\n};\n\nNotiflix.Notify.success('Привет, заполни поля');\n \nrefs.button.addEventListener('click', e => {\n  e.preventDefault();\n\n  const delay = refs.firstDelay.value;\n  const stepValue = refs.stepDelay.value;\n  const amountValue = Number(refs.amount.value);\n\n  const timeoutId = setTimeout(() => {\n    Notiflix.Notify.info('Запуск!');\n\n    let position = 0;\n    // ниже код для дополнительной проверки, в этом примере он не нужен\n    let amountCounter = false;\n\n    const intervaId = setInterval(() => {\n      if (position >= amountValue || amountCounter) {\n        Notiflix.Notify.warning(`Было запущено ${position} промисов, останавливаем выполнение скрипта`);\n        clearInterval(intervaId);\n        return\n      }\n\n      position += 1;\n     \n      function createPromise(position, stepValue) {\n        return new Promise((resolve, reject) => {\n          const shouldResolve = Math.random() > 0.5;\n\n          if (shouldResolve) {\n            resolve(\n              Notiflix.Notify.success(`✅ Выполнен запрос номер ${position} с задержкой ${stepValue} мс`))\n          } else {\n            reject(\n              Notiflix.Notify.failure(`❌ Отклоненный запрос номер ${position} с задержкой ${stepValue} мс`\n              )\n            );\n            ;\n          }\n        });\n      }\n\n      createPromise(position, stepValue)\n        .then(() => {\n        })\n        .catch(() => {\n        });\n        \n    }, stepValue);\n  }, delay);\n\n});\n\n// Напиши скрипт, который при сабмите формы вызывает функцию\n// `createPromise(position, delay)` столько раз, сколько ввели в поле `amount`. При\n// каждом вызове передай ей номер создаваемого промиса (`position`) и задержку\n// учитывая введенную пользователем первую задержку (`delay`) и шаг (`step`).\n\n\n// Дополни код функции `createPromise` так, чтобы она возвращала **один промис**,\n// который выполянется или отклоняется через `delay` времени. Значением промиса\n// должен быть объект, в котором будут свойства `position` и `delay` со значениями\n// одноименных параметров. Используй начальный код функции для выбора того, что\n// нужно сделать с промисом - выполнить или отклонить.\n\n\n// ```js\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n// //\n\n\n// ```js\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n// ```\n\n// ### Библиотека уведомлений\n\n// > ⚠️ Следующий функционал не обязателен при сдаче задания, но будет хорошей\n// > дополнительной практикой.\n\n// Для отображения уведомлений пользователю вместо `console.log()` используй\n// библиотеку [notiflix](https://github.com/notiflix/Notiflix#readme).\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","firstDelay","document","querySelector","stepDelay","amount","button","$parcel$interopDefault","Notify","success","addEventListener","e","preventDefault","delay","value","stepValue1","amountValue","Number","setTimeout","info","position1","intervaId","setInterval","warning","clearInterval","position","stepValue","Promise","resolve","reject","Math","random","failure","then","catch"],"version":3,"file":"03-promises.03abb198.js.map"}